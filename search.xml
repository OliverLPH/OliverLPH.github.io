<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[PaddlePaddle编译安装1]]></title>
    <url>%2F2019%2F11%2F01%2FPaddlePaddle%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%851%2F</url>
    <content type="text"><![CDATA[PaddlePaddle的安装在官方网站已经比较详尽了，大多数用户可参考链接进行安装（https://www.paddlepaddle.org.cn/install/quick）。 PaddlePaddle目前仅支持Python语言进行训练，Python，C/C++语言进行模型推理。当前对Windows、OSX、Linux等多种操作系统进行支持。 但是快速安装的方案肯定不能满足有些用户的需求的，我这里就介绍一些编译Paddle的过程中会遇到的问题，希望能解决一些用户的困惑。 PaddlePaddle源码编译现在PaddlePaddle支持在Windows, Ubuntu, Centos, OSX等操作系统上进行编译，具体可以参考PaddlePaddle官网编译里面的内容介绍。 前置条件 CMake 3.0+ GCC 4.8+ Python(64 bit) 2.7+ pip(64 bit) 9.0.1+ Git GPU版本：CUDA 8.0+, cuDNN 7.3+ 就目前来看，PaddlePaddle在Linux平台下的编译会比较顺畅一些，当然各平台的编译流程也是大同小异的。 Docker容器内编译Docker这个软件非常的好，建议大家在docker中进行编译，因为虚拟化容器跟本地环境是隔离的，可以避免影响本地环境。Docker介绍如果还不了解docker的朋友，建议也去简单学习一下，这个东西是真的很有用处。接下来就进入正题了。 首先是clone代码库，没有Git的朋友需要先装一下Git，或者在PaddlePaddle-Github里面下载代码的zip包也是可以的。如果安装了Git，就直接clone代码库到你想要的文件夹里。 1git clone https://github.com/PaddlePaddle/Paddle.git 然后就可以创建编译环境了，官方提供了配置好部分环境的docker镜像hub.baidubce.com/paddlepaddle/paddle:latest-dev这个Ubuntu1604，CUDA8，cuDNN7.3的镜像，里面包含了CMake，python2.7，git等常用的软件。 但我更常用的是Nvidia给出的简单版的镜像 nvidia/cuda:9.0-cudnn7-devel-centos7 nvidia/cuda:9.2-cudnn7-devel-ubuntu16.04 然后自己构造一下所需环境。 cd到刚刚下载Paddle代码的路径 如果没有GPU和nvidia-docker则只能使用docker 1docker run --name paddle-test -v $PWD:/paddle --network=host -w /paddle -it hub.baidubce.com/paddlepaddle/paddle:latest-dev /bin/bash 如果有GPU和nvidia-docker则执行以下代码 1nvidia-docker run --name paddle-test -v $PWD:/paddle --network=host -w /paddle -it hub.baidubce.com/paddlepaddle/paddle:latest-dev /bin/bash 然后现在就可以开始编译了 首先在 paddle主路径下创建build文件夹并进入。 123cd /paddlemkdir buildcd build 然后CMake会有一些参数，可以根据自己的需求选择。 具体的参数可以在[Paddle-CMakeLists](https://github.com/PaddlePaddle/Paddle/ blob/develop/CMakeLists.txt)里查看一下。然后以下命令就可以编译出GPU，Python3.5版本的 PaddlePaddle了。 1234cmake .. -DPY_VERSION=3.5 \ -DWITH_GPU=ON \ -DWITH_TESTING=OFF \ -DCMAKE_BUILD_TYPE=Release 12make -j$(nproc)# -j后面可跟数字，指定并行编译的核数 完成编译之后 编译出来的whl包就在 python/dist路径下。执行 pip install 即可]]></content>
      <categories>
        <category>PaddlePaddle</category>
      </categories>
      <tags>
        <tag>PaddlePaddle</tag>
        <tag>DeepLearning</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Markdown常用语法（一）]]></title>
    <url>%2F2019%2F01%2F17%2FMarkdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[Markdown 的相关常用命令 Markdown 常用语法（一）插入命令常用的 Markdown的插入命令 插入图片1![插入图片的名字](https://raw.githubusercontent.com/OliverLPH/Pictures/master/照片/Skye的晚霞.JPG) 但是上面这个方式无法选择图片显示的位置，和选择图片的大小。 1&lt;img width = &quot;100&quot; height =&apos;90&apos; src=&quot;https://raw.githubusercontent.com/OliverLPH/Pictures/master/照片/Skye的晚霞.JPG&quot;/&gt; 这个代码可以修改图片的大小。 12345&lt;div align=center&gt;&lt;img width = &quot;100&quot; height =&apos;90&apos; src=&quot;https://raw.githubusercontent.com/OliverLPH/Pictures/master/照片/Skye的晚霞.JPG&quot;/&gt;&lt;div&gt;&lt;div align=left&gt;&lt;img width = &quot;100&quot; height =&apos;90&apos; src=&quot;https://raw.githubusercontent.com/OliverLPH/Pictures/master/照片/Skye的晚霞.JPG&quot;/&gt;&lt;div&gt;&lt;div align=right&gt;&lt;img width = &quot;100&quot; height =&apos;90&apos; src=&quot;https://raw.githubusercontent.com/OliverLPH/Pictures/master/照片/Skye的晚霞.JPG&quot;/&gt;&lt;div&gt; 这个代码可以修改图片的位置。 插入视频12&lt;video src=&quot;https://www.bilibili.com/video/av2271112&quot; width=&quot;320&quot; height=&quot;180&quot; controls=&quot;controls&quot;&gt;&lt;/video&gt; 上面的代码可以插入视频，这个视频是雷总的著名歌曲。 插入音乐Markdown支持插入 在线音乐的外链，网易云音乐是可以的。 参考: markdown插入网易云音乐 插入公式Markdown插入公式的操作比较简单，将latex格式的公式放在”$”里面就可以了 1$$L_\theta(x)=\prod^m_&#123;i=1&#125;h_\theta(x^i;\theta)^&#123;yi&#125; \cdot (1-h_\theta(x^i;\theta))^&#123;1-y^i&#125;$$ $$L_\theta(x)=\prod^m_{i=1}h_\theta(x^i;\theta)^{yi} \cdot (1-h_\theta(x^i;\theta))^{1-y^i}$$ 插入表格表格的插入操作也比较简单，但是Markdown貌似不支持合并单元格。 1234567| Student | Class | Age | Gender || --- | --- | --- | --- || Oliver | A | 19 | M || Allie | A | 18 | F || Lee | B | 20 | M || Jerry | A | 19 | M || Frank | B | 18 | F | Student Class Age Gender Oliver A 19 M Allie A 18 F Lee B 20 M Jerry A 19 M Frank B 18 F]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Jupyter添加新kernel(Mac)]]></title>
    <url>%2F2018%2F12%2F15%2FJupyter%E6%B7%BB%E5%8A%A0%E6%96%B0kernel-Mac%2F</url>
    <content type="text"><![CDATA[在 Anaconda中创建了新的虚拟环境，但是在Jupyter Notebook或者Jupyter lab里却看不见，然后以下是解决办法。 创建虚拟环境首先打开 Terminal界面，创建新环境 “”new_env_” 1$ conda create -n new_env 查询当前 conda包含的虚拟环境 1$ conda env list 变更当前环境至指定虚拟环境 1$ source activate new_env 将虚拟环境添加到Jupyter在Terminal里首先需要切换到需要添加的环境中，然后输入以下命令 1$ python -m ipykernel install --name new_env 此时如果 提示缺失 ipykernel，则返回 conda进行安装。 如果 提示缺失权限，则 添加 sudo 然后输入密码则可以完成添加。 1$ sudo python -m ipykernel install --name new_env]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>工具</tag>
        <tag>Jupyter Notebook</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo常用命令（一）]]></title>
    <url>%2F2018%2F12%2F15%2FHexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A41%2F</url>
    <content type="text"><![CDATA[Hexo 的相关常用命令 Hexo 常用命令（一）命令常用的 hexo简写命令 hexo new draft &quot;new draft&quot; #创建草稿 hexo publish [layout] &lt;filename&gt; #将草稿升级为文章 hexo n &quot;new_post&quot;==hexo new &quot;new_post&quot; #直接创建文章 hexo p==hexo publish #发布文章，将草稿升级为文章 hexo g==hexo generate #生成 hexo s==hexo server #在本地服务器预览，可修改localhost端口hexo d==hexo deploy #部署到远端服务器 hexo clean #清除本地文件]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hadoop(3.0.3)安装和配置过程（Mac）]]></title>
    <url>%2F2018%2F06%2F23%2FHadoop%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[最近想研究一下分布式计算工具，于是瞄上了Hadoop，在网上找了很多教程，但还是遇到了一些问题，在这里就我记录一下遇到的问题。版本是 Hadoop(3.0.3) Hadoop(3.0.3) Java环境检查Java版本号检查在terminal里输入如下指令可以查看Java版本1$ java -version 如果Java已经是安装好了的话，就会出现如下的信息，里面的版本号可能会不一样 1234$ java -versionjava version &quot;1.8.0_161&quot;Java(TM) SE Runtime Environment (build 1.8.0_161-b12)Java HotSpot(TM) 64-Bit Server VM (build 25.161-b12, mixed mode) Java安装如果你没有Java，在这网址里可以安装Java安装网址JDK的安装就搜索一下就有 Java的的系统环境变量Java的系统环境变量是如下指令查询的1$ /usr/libexec/java_home 查询成功会反馈类似的路径1/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home 该路径一会配置环境变量会用得上 Hadoop下载Hadoop下载链接我是在这里下载的3.0.3版本号。和之前2.x的版本有些许不一样。然后我是下载的编译好的binary版本。Hadoop3.0.3下载链接进来之后任意选择镜像下载就可以了。 然后把解压后的文件夹hadoop-3.0.3存放到一个路径，比如我就把该文件夹放在documents下面。路径如下1/Users/Oliver/Documents/hadoop-3.0.3 配置Mac os环境SSH这里就是我遇到问题最奇怪的地方 按照别人讲的教程大概有如下三种方法1$ ssh localhost 然后查看是否登陆成功,登陆成功讯息如下123$ ssh localhostMBP:hadoop-3.0.3 Oliver$ ssh localhostLast login: Sat Jun 23 10:42:58 2018 如果这里不是直接输出如上讯息，那么看是否需要输入密码，就根据提示一步一步来。如果还是不成功，那么看如下方法 方法一 打开系统偏好设置 –&gt; 共享–&gt; 勾选远程登录–&gt; 设置允许访问：所有用户 然后再次在terminal里输入1$ ssh localhost 参考网址：Mac 系统安装Hadoop 2.7.3参考网址：Setting up Hadoop 2.6 on Mac OS X Yosemite 如果以上方法不成功 方法二生成一个ssh key并储存和拷贝，方法比较笨 先输入如下指令，生成ssh key 1$ ssh-keygen 然后会提示将该key储存在哪里，这个路径就随意设置,比如我就储存在hadoop文件夹内 1/Users/Oliver/Documents/hadoop-3.0.3/sshkey/id_rsa 其中id_rsa就是我们要的文件。 键入如下指令 1cp /Users/Oliver/Documents/hadoop-3.0.3/sshkey/id_rsa.pub .ssh/authorized_keys 其中路径要和我们储存key的路径一致。这是为了拷贝新生成的public key 最后我们再试着输入 1$ ssh localhost 此时应该就可以成功了 参考网址：Hadoop: start-dfs.sh permission denied 方法三此方法还未经过验证（未完成） 配置环境变量总环境变量配置打开terminal 12$ touch ~/.bash_profile$ vim ~/.bash_profile 执行以上代码可以进入Vim编辑器，编辑环境变量。添加如下代码键入 i 可以开始编辑（详情可以搜索Vim的命令）123# Hadoopexport HADOOP_HOME=/Users/Oliver/Documents/hadoop-3.0.3(这个是Hadoop distribution的路径，根据自己设定的来调)export PATH=$PATH:$HADOOP_HOME/bin 然后保存再退出，以下是部分Vim的指令，其余指令可以自行搜索一下 命令 简单说明 :w 保存编辑后的文件内容，但不退出vim编辑器 :wq 保存文件内容后退出vim编辑器 :q 在未做任何编辑处理而准备退出vim时，可以使用此命令 退出Vim界面之后，在terminal里输入如下命令使变量立即生效1$ source ~/.bash_profile 我们就成功的配置好了Hadoop1$ hadoop version 用该语句来确认Hadoop配置,此时可以查看 Hadoop文件配置打开如下路径里的文件进行更改, 将代码复制进去 etc/hadoop/core-site.xml: 123456&lt;configuration&gt; &lt;property&gt; &lt;name&gt;fs.defaultFS&lt;/name&gt; &lt;value&gt;hdfs://localhost:9000&lt;/value&gt; &lt;/property&gt;&lt;/configuration&gt; etc/hadoop/hdfs-site.xml: 123456&lt;configuration&gt; &lt;property&gt; &lt;name&gt;dfs.replication&lt;/name&gt; &lt;value&gt;1&lt;/value&gt; &lt;/property&gt;&lt;/configuration&gt; etc/hadoop/mapred-site.xml: 123456&lt;configuration&gt; &lt;property&gt; &lt;name&gt;mapreduce.framework.name&lt;/name&gt; &lt;value&gt;yarn&lt;/value&gt; &lt;/property&gt;&lt;/configuration&gt; etc/hadoop/yarn-site.xml: 123456&lt;configuration&gt; &lt;property&gt; &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt; &lt;value&gt;mapreduce_shuffle&lt;/value&gt; &lt;/property&gt;&lt;/configuration&gt; 参考网址：Setting up Hadoop 2.6 on Mac OS X Yosemite /etc/hadoop/hadoop-env.sh handoop环境添加这段代码就可以了，注意就是Java的系统环境变量的路径 1export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home 可以看到前面一开始提到的用如下指令查询 1$ /usr/libexec/java_home 执行 start hdfs and yarn 在terminal里进入hadoop distribution的文件夹 12$ cd 到hadoop的文件夹，比如下面路径就是我的Hadoop$ cd /users/Oliver/documents/hadoop-3.0.3/ 对Namenode执行格式化操作 1$ hadoop namenode -format 启动hadoop 启动NameNode和DataNode 1$ sbin/start-dfs.sh 成功后出现 123Starting namenodes on [localhost]Starting datanodesStarting secondary namenodes [xiaohuobandeMBP.local] 启动ResourceManager和NodeManager 1$ sbin/start-yarn.sh 成功后出现 12Starting resourcemanagerStarting nodemanagers 检查hadoop是否启动成功 在terminal里输入 1$ jps 会显示 1234518739 Jps18133 NameNode18375 SecondaryNameNode18568 ResourceManager18665 NodeManager 则表示启动成功。 此时在浏览器中访问localhost:8088和localhost:9870(hadoop3.x版本)，可以看到Hadoop的界面 localhost:50070(Hadoop2.x版本) 到此为止，Hadoop就已经完成配置了，接下来就是使用Hadoop了]]></content>
      <categories>
        <category>机器学习和数据挖掘</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
        <tag>数据挖掘</tag>
        <tag>分布式计算</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo deploy问题]]></title>
    <url>%2F2018%2F06%2F22%2Fhexo-deploy%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[Hexo deploy的问题一开始deploy成功之后，再重新deploy的时候，会发现并没有推送本地的文件到GitHub 12345678910111213INFO Deploying: gitINFO Clearing .deploy_git folder...INFO Copying files from public folder...INFO Copying files from extend dirs...On branch masternothing to commit, working tree cleanTo github.com:OliverLPH/OliverLPH.github.io + a8ea0df...bc3e952 HEAD -&gt; master (forced update)Branch &apos;master&apos; set up to track remote branch &apos;master&apos; from &apos;git@github.com:OliverLPH/OliverLPH.github.io&apos;.INFO Deploy done: gitxiaohuobandeMBP:source Oliver$ hexo cleanINFO Deleted database.INFO Deleted public folder. 然后如上面的代码所示，hexo显示nothing to commit, working tree clean。 在网上搜索后发现有的几种方案 方案一12hexo cleanhexo d 这样就可以清理掉public文件夹，然后重新deploy 方案二移除.deploy文件夹123rm -rf .deployhexo generaterhexo deploy]]></content>
      <categories>
        <category>Hello World!</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>初次使用</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World！]]></title>
    <url>%2F2018%2F06%2F22%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Hello World!终于把个人博客弄好的，菜鸟真是不容易。还是要感谢一下网上的各路大神，都是借鉴了大家的攻略才终于弄好的。 参考网站Hexo主题来源: Next主题Hexo配置参考1: Hexo搭建独立博客全纪录Hexo配置参考2: Hexo官方文档Hexo配置参考3: hexo博客更换主题]]></content>
      <categories>
        <category>Hello World!</category>
      </categories>
      <tags>
        <tag>初次使用</tag>
      </tags>
  </entry>
</search>
