<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Python语法整理（普通算法，机器学习和数据挖掘的应用）]]></title>
    <url>%2F2018%2F06%2F28%2FPython%E8%AF%AD%E6%B3%95%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[Python语法整理(更新日期 2018/6/28) Python语法整理笔记Python是目前最常用的语言之一，这里我自己总结一下我在学习的过程中遇到的问题。 Python基本语法Python的函数式编程函数式编程的特性 对象，Mutable和Immutable对象 Muatble对象: list, dict, set Immutable对象: strings, tuples, numbers 1.1. 区分Muatble对象和Immutable对象 区别mutable对象和immutable对象的方法很简单，只要看该对象的位置是否发生改变。 查找对象位置id(). 比如 12345678In [1]: a = 1In [2]: id(a)Out[2]: 4345522256In [3]: a = 2In [4]: id(a)Out[4]: 4345522288In [5]: id(2)Out[5]: 4345522288 从这段代码可以看出来，当a=2的时候，id(a)的地址是id(2)的地址，因此a自己是没有创建地址的，只是被指向了2的地址。 &gt;immutable 并不是绝对的不可变。 &gt;&gt; 比如若是tuple里面包含的是一个mutable object，那么mutable object的值仍然是可变的。但是因为tuple 中的 mutable object 改变的只是 value而不是identity。因此tuple仍然是immutable的object。 1.2 immutable data的作用 像Clojure一样，默认上变量是不可变的，如果你要改变变量，你需要把变量copy出去修改。这样一来，可以让你的程序少很多Bug。因为，程序中的状态不好维护，在并发的时候更不好维护。（你可以试想一下如果你的程序有个复杂的状态，当以后别人改你代码的时候，是很容易出bug的，在并行中这样的问题就更多了） first class functions可以理解为面向对象编程 尾递归优化Python不支持尾递归优化 函数式编程的方法 经典函数: Map &amp; Reduce 在Python中，Map reduce用的非常之多 举几个简单的例子 123&gt;&gt; length = map(len,[&quot;123&quot;,&quot;425&quot;,&quot;abc&quot;])&gt;&gt; print(list(length))&gt;&gt; [3, 3, 3] #输出 Map函数还可以和lambda函数一起使用 123&gt;&gt; square_list = map(lambda x:x*x, [1,2,3,4,5,10])&gt;&gt; print(list(square_list))&gt;&gt; [1, 4, 9, 16, 25, 100] #输出 Map函数用来批量开根号 123&gt;&gt; square_root_list = map(lambda x:pow(x,0.5), [4,9,16,25,36,2,3])&gt;&gt; print(list(square_root_list))&gt;&gt; [2.0, 3.0, 4.0, 5.0, 6.0, 1.4142135623730951, 1.7320508075688772] #输出 然后就是reduce函数怎么用 在Python3中，reduce() 函数已经被从全局名字空间里移除了，它现在被放置在 fucntools 模块里，如果想要使用它，则需要通过引入functools模块来调用 reduce()函数： 举个例子 12345&gt;&gt; #必须要先从functool里面调用才可以用&gt;&gt; from functools import reduce&gt;&gt; factorial = reduce(lambda x, y: x+y, [1, 2, 3, 4, 5])&gt;&gt; print(factorial)&gt;&gt; 15 #输出 这个例子相当于是计算了((1+2)+3)+4)+5),就是叠加了起来。其中 reduce(function, iterable[, initializer]), fucntion函数必须要有两个入参，每次先从第一二个参数开始运算function，然后得出了结论，就可以和第三个参数继续运算。因此符合了Reduce的思想，将运算分割开来了。 因为reduce的特性，阶乘，叠加，求和等思路的的可以用用reduce。 1234&gt;&gt; from functools import reduce&gt;&gt; itera = reduce(lambda x,y: x*y, [1,2,3,4,5,6])&gt;&gt; print(itera)&gt;&gt; 720 #输出 上面的代码就是输出了6的阶乘 参考网页: 函数式编程这个例子是从该网页看到的 还有一些别函数filter, find, all, any(其它函数式的语言也有),可以让你的代码更简洁,更清楚。 计算数组中正数的平均值 123456789101112num =[2, -5, 9, 7, -2, 5, 3, 1, 0, -3, 8]positive_num_cnt = 0positive_num_sum = 0for i in range(len(num)): if num[i] &gt; 0: positive_num_cnt += 1 positive_num_sum += num[i] if positive_num_cnt &gt; 0: average = positive_num_sum / positive_num_cnt print(average) #输出5 如果采用函数式编程 12positive_num = filter(lambda x: x&gt;0, num)average = reduce(lambda x,y: x+y, positive_num) / len( positive_num ) 如上面的代码所示，两句话就把这个问题解决了 Pipeline Recursing currying higher order function 函数式编程的好处 parallelization 并行 lazy evaluation 惰性求值 determinism 确定性 Python数据结构Python库语法Python算法]]></content>
      <categories>
        <category>机器学习和数据挖掘</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>数据挖掘</tag>
        <tag>Python</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Latex语法整理]]></title>
    <url>%2F2018%2F06%2F23%2FLatex%E8%AF%AD%E6%B3%95%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[Latex语法整理]]></content>
      <categories>
        <category>Latex</category>
      </categories>
      <tags>
        <tag>Latex</tag>
        <tag>论文编辑</tag>
        <tag>数学公式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常见机器学习算法]]></title>
    <url>%2F2018%2F06%2F23%2F%E5%B8%B8%E8%A7%81%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%2F</url>
    <content type="text"><![CDATA[常见机器学习算法和模型]]></content>
      <categories>
        <category>机器学习和数据挖掘</category>
      </categories>
      <tags>
        <tag>数据挖掘</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常见数据挖掘算法]]></title>
    <url>%2F2018%2F06%2F23%2F%E5%B8%B8%E8%A7%81%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E7%AE%97%E6%B3%95%2F</url>
    <content type="text"><![CDATA[常见数据挖掘算法]]></content>
      <categories>
        <category>机器学习和数据挖掘</category>
      </categories>
      <tags>
        <tag>数据挖掘</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[SQL语法整理]]></title>
    <url>%2F2018%2F06%2F23%2FSQL%E8%AF%AD%E6%B3%95%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[SQL语法]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>SQL</tag>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hadoop(3.0.3)安装和配置过程（Mac）]]></title>
    <url>%2F2018%2F06%2F23%2FHadoop%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[最近想研究一下分布式计算工具，于是瞄上了Hadoop，在网上找了很多教程，但还是遇到了一些问题，在这里就我记录一下遇到的问题。版本是 Hadoop(3.0.3) Hadoop(3.0.3) Java环境检查Java版本号检查在terminal里输入如下指令可以查看Java版本1$ java -version 如果Java已经是安装好了的话，就会出现如下的信息，里面的版本号可能会不一样 1234$ java -versionjava version &quot;1.8.0_161&quot;Java(TM) SE Runtime Environment (build 1.8.0_161-b12)Java HotSpot(TM) 64-Bit Server VM (build 25.161-b12, mixed mode) Java安装如果你没有Java，在这网址里可以安装Java安装网址JDK的安装就搜索一下就有 Java的的系统环境变量Java的系统环境变量是如下指令查询的1$ /usr/libexec/java_home 查询成功会反馈类似的路径1/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home 该路径一会配置环境变量会用得上 Hadoop下载Hadoop下载链接我是在这里下载的3.0.3版本号。和之前2.x的版本有些许不一样。然后我是下载的编译好的binary版本。Hadoop3.0.3下载链接进来之后任意选择镜像下载就可以了。 然后把解压后的文件夹hadoop-3.0.3存放到一个路径，比如我就把该文件夹放在documents下面。路径如下1/Users/Oliver/Documents/hadoop-3.0.3 配置Mac os环境SSH这里就是我遇到问题最奇怪的地方 按照别人讲的教程大概有如下三种方法1$ ssh localhost 然后查看是否登陆成功,登陆成功讯息如下123$ ssh localhostMBP:hadoop-3.0.3 Oliver$ ssh localhostLast login: Sat Jun 23 10:42:58 2018 如果这里不是直接输出如上讯息，那么看是否需要输入密码，就根据提示一步一步来。如果还是不成功，那么看如下方法 方法一 打开系统偏好设置 –&gt; 共享–&gt; 勾选远程登录–&gt; 设置允许访问：所有用户 然后再次在terminal里输入1$ ssh localhost 参考网址：Mac 系统安装Hadoop 2.7.3参考网址：Setting up Hadoop 2.6 on Mac OS X Yosemite 如果以上方法不成功 方法二生成一个ssh key并储存和拷贝，方法比较笨 先输入如下指令，生成ssh key 1$ ssh-keygen 然后会提示将该key储存在哪里，这个路径就随意设置,比如我就储存在hadoop文件夹内 1/Users/Oliver/Documents/hadoop-3.0.3/sshkey/id_rsa 其中id_rsa就是我们要的文件。 键入如下指令 1cp /Users/Oliver/Documents/hadoop-3.0.3/sshkey/id_rsa.pub .ssh/authorized_keys 其中路径要和我们储存key的路径一致。这是为了拷贝新生成的public key 最后我们再试着输入 1$ ssh localhost 此时应该就可以成功了 参考网址：Hadoop: start-dfs.sh permission denied 方法三此方法还未经过验证（未完成） 配置环境变量总环境变量配置打开terminal 12$ touch ~/.bash_profile$ vim ~/.bash_profile 执行以上代码可以进入Vim编辑器，编辑环境变量。添加如下代码键入 i 可以开始编辑（详情可以搜索Vim的命令）123# Hadoopexport HADOOP_HOME=/Users/Oliver/Documents/hadoop-3.0.3(这个是Hadoop distribution的路径，根据自己设定的来调)export PATH=$PATH:$HADOOP_HOME/bin 然后保存再退出，以下是部分Vim的指令，其余指令可以自行搜索一下 命令 简单说明 :w 保存编辑后的文件内容，但不退出vim编辑器 :wq 保存文件内容后退出vim编辑器 :q 在未做任何编辑处理而准备退出vim时，可以使用此命令 退出Vim界面之后，在terminal里输入如下命令使变量立即生效1$ source ~/.bash_profile 我们就成功的配置好了Hadoop1$ hadoop version 用该语句来确认Hadoop配置,此时可以查看 Hadoop文件配置打开如下路径里的文件进行更改, 将代码复制进去 etc/hadoop/core-site.xml: 123456&lt;configuration&gt; &lt;property&gt; &lt;name&gt;fs.defaultFS&lt;/name&gt; &lt;value&gt;hdfs://localhost:9000&lt;/value&gt; &lt;/property&gt;&lt;/configuration&gt; etc/hadoop/hdfs-site.xml: 123456&lt;configuration&gt; &lt;property&gt; &lt;name&gt;dfs.replication&lt;/name&gt; &lt;value&gt;1&lt;/value&gt; &lt;/property&gt;&lt;/configuration&gt; etc/hadoop/mapred-site.xml: 123456&lt;configuration&gt; &lt;property&gt; &lt;name&gt;mapreduce.framework.name&lt;/name&gt; &lt;value&gt;yarn&lt;/value&gt; &lt;/property&gt;&lt;/configuration&gt; etc/hadoop/yarn-site.xml: 123456&lt;configuration&gt; &lt;property&gt; &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt; &lt;value&gt;mapreduce_shuffle&lt;/value&gt; &lt;/property&gt;&lt;/configuration&gt; 参考网址：Setting up Hadoop 2.6 on Mac OS X Yosemite /etc/hadoop/hadoop-env.sh handoop环境添加这段代码就可以了，注意就是Java的系统环境变量的路径 1export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_161.jdk/Contents/Home 可以看到前面一开始提到的用如下指令查询 1$ /usr/libexec/java_home 执行 start hdfs and yarn 在terminal里进入hadoop distribution的文件夹 12$ cd 到hadoop的文件夹，比如下面路径就是我的Hadoop$ cd /users/Oliver/documents/hadoop-3.0.3/ 对Namenode执行格式化操作 1$ hadoop namenode -format 启动hadoop 启动NameNode和DataNode 1$ sbin/start-dfs.sh 成功后出现 123Starting namenodes on [localhost]Starting datanodesStarting secondary namenodes [xiaohuobandeMBP.local] 启动ResourceManager和NodeManager 1$ sbin/start-yarn.sh 成功后出现 12Starting resourcemanagerStarting nodemanagers 检查hadoop是否启动成功 在terminal里输入 1$ jps 会显示 1234518739 Jps18133 NameNode18375 SecondaryNameNode18568 ResourceManager18665 NodeManager 则表示启动成功。 此时在浏览器中访问localhost:8088和localhost:9870(hadoop3.x版本)，可以看到Hadoop的界面 localhost:50070(Hadoop2.x版本) 到此为止，Hadoop就已经完成配置了，接下来就是使用Hadoop了]]></content>
      <categories>
        <category>机器学习和数据挖掘</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
        <tag>数据挖掘</tag>
        <tag>分布式计算</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Leetcode解题思路]]></title>
    <url>%2F2018%2F06%2F22%2FLeetCode%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF%2F</url>
    <content type="text"><![CDATA[Leetcode解题思路 在日常刷LeetCode题时，对自己思路做一些记录语言主要为Python Github上也有我上传好的代码: Github_Peihan’s LeetCode LeetCodeLeetcode #1 Title: Two Sum(两数之和)#1题目描述 代码 1234567891011121314151617181920212223class Solution: def twoSum(self, nums, target): """ :type nums: List[int] :type target: int :rtype: List[int] """ for num in nums: remain_num = target - num if remain_num in nums: x = nums.index(remain_num) y = nums.index(num) if x != y: result = [x,y] elif x == y: nums[x] = None if remain_num in nums: y = nums.index(num) result = [x,y] else: pass return result Leetcode #2 Title: Add Two Numbers(两数相加)#2题目描述 代码 1234567891011121314151617181920212223242526# Definition for singly-linked list.# class ListNode:# def __init__(self, x):# self.val = x# self.next = Noneclass Solution: def addTwoNumbers(self, l1, l2): """ :type l1: ListNode :type l2: ListNode :rtype: ListNode """ dummy = cur = ListNode(0) carry = 0 #进位 while l1 or l2 or carry: if l1: carry += l1.val l1 = l1.next if l2: carry += l2.val l2 = l2.next cur.next = ListNode(carry%10) cur = cur.next carry //= 10 return dummy.next Leetcode #3 Title: Longest Substring Without Repeating Characters(无重复字符的最长子串)#3题目描述 代码 1234567891011121314151617181920class Solution: def lengthOfLongestSubstring(self, s): """ :type s: str :rtype: int """ seen_map = &#123;&#125; max_len = 0 len_last = 0 for i in range(len(s)): l = s[i] if l in seen_map: len_last = min(i - seen_map[l] - 1, len_last) + 1 seen_map[l] = i else: len_last += 1 seen_map[l] = i if len_last &gt;= max_len: max_len = len_last return max_len Leetcode #9 Title: Palindrome Number(回文数)#9题目描述 这道题可以用一句话解决问题。但是仍然把integer转换成了character。 思路如下： 比如输入是 x = 123456 str(x)表示 ‘123456’ str(x)[::-1]表示反向的str(x),就是顺序相反，所以输出为 ‘654321’ 因为回文数的特征，所以直接str(x)==str(x)[::-1]就说明是回文数了 代码 1234567class Solution: def isPalindrome(self, x): """ :type x: int :rtype: bool """ return str(x)==str(x)[::-1] Leetcode #11 Title: Container With Most Water(盛最多水的容器)#11题目描述 这道题目的难点在于时间复杂度，如果直接使用两个循环，那么很容易就超时了。因此我们将思路拓展一下，能够构成最大面积的值是怎么得到的。 比如输入是[1,2,1,4,2,1] 那么此时点的位置则是{(1,1),(2,2),(3,1),(4,4),(5,2),(6,1)} 然后我们就开始从两边的数字可以构成的面积开始推算，然后每次向中间移动一格。此时我们判断构成“容器”的两端的高度，然后将更矮那一端的 垂线 向中间移动，直到两个垂线相邻。 代码 12345678910111213141516171819class Solution: def maxArea(self, height): """ :type height: List[int] :rtype: int """ max_area = 0 #initilize max area i = 0 j = len(height) - 1 while i &lt; j: area = (j-i)*min(height[i], height[j]) max_area = max(max_area, area) if height[i] &lt;= height[j]: i += 1 else: j -= 1 return max_area]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>LeetCode</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[逻辑回归知识点总结]]></title>
    <url>%2F2018%2F06%2F22%2F%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%2F</url>
    <content type="text"><![CDATA[逻辑回归知识点总结(未完成)逻辑回归机器学习中的常见算法，这里我自己总结一下我在学习的过程中总结的知识点。 逻辑回归的定义逻辑回归假设数据服从伯努利分布,通过极大化似然函数的方法，运用梯度下降来求解参数，来达到将数据二分类的目的。 逻辑回归的基本假设伯努利分布 $$h_\theta(x;\theta)=p$$ $$p=\frac{1}{1+e^{-\theta^Tx}}$$ $$h_\theta(x;\theta)=\frac{1}{1+e^{-\theta^Tx}}$$ 逻辑回归的损失函数 $$L_\theta(x)=\prod^m_{i=1}h_\theta(x^i;\theta)^{yi} \cdot (1-h_\theta(x^i;\theta))^{1-y^i}$$ 求解逻辑回归 逻辑回归的分类 scikit-learn库中逻辑回归的使用]]></content>
      <categories>
        <category>机器学习和数据挖掘</category>
      </categories>
      <tags>
        <tag>数据挖掘</tag>
        <tag>Python</tag>
        <tag>机器学习</tag>
        <tag>逻辑回归</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo deploy问题]]></title>
    <url>%2F2018%2F06%2F22%2Fhexo-deploy%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[Hexo deploy的问题一开始deploy成功之后，再重新deploy的时候，会发现并没有推送本地的文件到GitHub 12345678910111213INFO Deploying: gitINFO Clearing .deploy_git folder...INFO Copying files from public folder...INFO Copying files from extend dirs...On branch masternothing to commit, working tree cleanTo github.com:OliverLPH/OliverLPH.github.io + a8ea0df...bc3e952 HEAD -&gt; master (forced update)Branch &apos;master&apos; set up to track remote branch &apos;master&apos; from &apos;git@github.com:OliverLPH/OliverLPH.github.io&apos;.INFO Deploy done: gitxiaohuobandeMBP:source Oliver$ hexo cleanINFO Deleted database.INFO Deleted public folder. 然后如上面的代码所示，hexo显示nothing to commit, working tree clean。 在网上搜索后发现有的几种方案 方案一12hexo cleanhexo d 这样就可以清理掉public文件夹，然后重新deploy 方案二移除.deploy文件夹123rm -rf .deployhexo generaterhexo deploy]]></content>
      <categories>
        <category>Hello World!</category>
      </categories>
      <tags>
        <tag>初次使用</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World！]]></title>
    <url>%2F2018%2F06%2F22%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Hello World!终于把个人博客弄好的，菜鸟真是不容易。还是要感谢一下网上的各路大神，都是借鉴了大家的攻略才终于弄好的。 参考网站Hexo主题来源: Next主题Hexo配置参考1: Hexo搭建独立博客全纪录Hexo配置参考2: Hexo官方文档Hexo配置参考3: hexo博客更换主题]]></content>
      <categories>
        <category>Hello World!</category>
      </categories>
      <tags>
        <tag>初次使用</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[My first post]]></title>
    <url>%2F2018%2F06%2F22%2FMy-First-Post%2F</url>
    <content type="text"><![CDATA[Hello World!测试一下格式]]></content>
      <categories>
        <category>Hello World!</category>
      </categories>
      <tags>
        <tag>初次使用</tag>
      </tags>
  </entry>
</search>
